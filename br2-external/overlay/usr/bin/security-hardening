#!/bin/sh
#
# Security Hardening Script for PPPwn Live System
# Implements security measures to minimize attack surface and protect sensitive data
#

# Configuration
CONFIG_FILE="/etc/pppwn/config"
HARDENING_LOG="/tmp/security-hardening.log"

# Load configuration
if [ -f "$CONFIG_FILE" ]; then
    eval $(grep -E '^[a-zA-Z_][a-zA-Z0-9_]*=' "$CONFIG_FILE" | sed 's/^/export /')
fi

# Default values
DISABLE_UNUSED_SERVICES="${disable_unused_services:-true}"
READONLY_FILESYSTEM="${readonly_filesystem:-false}"
CLEAR_MEMORY_ON_SHUTDOWN="${clear_memory_on_shutdown:-true}"
VERBOSE_OUTPUT="${verbose_output:-true}"

# Logging function
log_security() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" >> "$HARDENING_LOG"
    
    if [ "$VERBOSE_OUTPUT" = "true" ]; then
        echo "[SECURITY] [$level] $message"
    fi
    
    logger -t security-hardening "$level: $message"
}

# Function to disable unnecessary services
disable_unused_services() {
    if [ "$DISABLE_UNUSED_SERVICES" != "true" ]; then
        log_security "INFO" "Service hardening disabled by configuration"
        return 0
    fi
    
    log_security "INFO" "Starting service hardening..."
    
    # List of services to disable (if they exist)
    local services_to_disable="
        telnetd
        ftpd
        httpd
        sshd
        rpcbind
        portmap
        nfs-common
        nfs-kernel-server
        bluetooth
        cups
        avahi-daemon
        dbus
    "
    
    # Disable services by removing or renaming init scripts
    for service in $services_to_disable; do
        # Check for SysV init scripts
        if [ -f "/etc/init.d/$service" ]; then
            log_security "INFO" "Disabling service: $service"
            mv "/etc/init.d/$service" "/etc/init.d/$service.disabled" 2>/dev/null || true
        fi
        
        # Check for systemd services (if systemd is present)
        if command -v systemctl >/dev/null 2>&1; then
            if systemctl is-enabled "$service" >/dev/null 2>&1; then
                log_security "INFO" "Disabling systemd service: $service"
                systemctl disable "$service" 2>/dev/null || true
            fi
        fi
    done
    
    # Remove unnecessary network services from inetd if present
    if [ -f "/etc/inetd.conf" ]; then
        log_security "INFO" "Hardening inetd configuration"
        # Comment out potentially dangerous services
        sed -i 's/^ftp/#ftp/' /etc/inetd.conf 2>/dev/null || true
        sed -i 's/^telnet/#telnet/' /etc/inetd.conf 2>/dev/null || true
        sed -i 's/^rsh/#rsh/' /etc/inetd.conf 2>/dev/null || true
        sed -i 's/^rlogin/#rlogin/' /etc/inetd.conf 2>/dev/null || true
    fi
    
    log_security "SUCCESS" "Service hardening completed"
}

# Function to configure minimal system components
configure_minimal_system() {
    log_security "INFO" "Configuring minimal system components..."
    
    # Remove unnecessary kernel modules if possible
    local modules_to_blacklist="
        bluetooth
        btusb
        snd
        sound
        usb-storage
        firewire
        pcmcia
        wireless
        wifi
    "
    
    # Create modprobe blacklist file
    if [ -d "/etc/modprobe.d" ]; then
        log_security "INFO" "Creating kernel module blacklist"
        cat > /etc/modprobe.d/pppwn-blacklist.conf << EOF
# PPPwn Live System - Security Hardening
# Blacklist unnecessary kernel modules to reduce attack surface

# Bluetooth modules
blacklist bluetooth
blacklist btusb
blacklist bnep
blacklist rfcomm

# Audio modules (not needed for exploit)
blacklist snd
blacklist snd_hda_intel
blacklist snd_ac97_codec

# USB storage (prevent unauthorized data access)
blacklist usb-storage
blacklist uas

# Wireless modules (not needed, use Ethernet only)
blacklist cfg80211
blacklist mac80211
blacklist iwlwifi
blacklist ath9k
blacklist rt2x00

# FireWire (potential DMA attacks)
blacklist firewire_core
blacklist firewire_ohci

# PCMCIA (legacy, not needed)
blacklist pcmcia
blacklist yenta_socket
EOF
    fi
    
    # Disable core dumps for security
    if [ -f "/etc/security/limits.conf" ]; then
        log_security "INFO" "Disabling core dumps"
        echo "* hard core 0" >> /etc/security/limits.conf
    fi
    
    # Set restrictive umask
    if [ -f "/etc/profile" ]; then
        log_security "INFO" "Setting restrictive umask"
        echo "umask 077" >> /etc/profile
    fi
    
    log_security "SUCCESS" "Minimal system configuration completed"
}

# Function to implement memory protection
implement_memory_protection() {
    log_security "INFO" "Implementing memory protection measures..."
    
    # Disable swap to prevent sensitive data from being written to disk
    log_security "INFO" "Disabling swap"
    swapoff -a 2>/dev/null || true
    
    # Clear memory on process termination (if supported)
    if [ -f "/proc/sys/kernel/core_pattern" ]; then
        log_security "INFO" "Configuring core dump handling"
        echo "|/bin/false" > /proc/sys/kernel/core_pattern 2>/dev/null || true
    fi
    
    # Enable address space layout randomization
    if [ -f "/proc/sys/kernel/randomize_va_space" ]; then
        log_security "INFO" "Enabling ASLR"
        echo 2 > /proc/sys/kernel/randomize_va_space 2>/dev/null || true
    fi
    
    # Restrict access to kernel logs
    if [ -f "/proc/sys/kernel/dmesg_restrict" ]; then
        log_security "INFO" "Restricting kernel log access"
        echo 1 > /proc/sys/kernel/dmesg_restrict 2>/dev/null || true
    fi
    
    # Restrict access to kernel pointers
    if [ -f "/proc/sys/kernel/kptr_restrict" ]; then
        log_security "INFO" "Restricting kernel pointer access"
        echo 2 > /proc/sys/kernel/kptr_restrict 2>/dev/null || true
    fi
    
    log_security "SUCCESS" "Memory protection measures implemented"
}

# Function to configure filesystem security
configure_filesystem_security() {
    log_security "INFO" "Configuring filesystem security..."
    
    # Mount temporary filesystems with security options
    log_security "INFO" "Securing temporary filesystems"
    
    # Remount /tmp with noexec, nosuid, nodev if possible
    if mount | grep -q " /tmp "; then
        mount -o remount,noexec,nosuid,nodev /tmp 2>/dev/null || true
        log_security "INFO" "Remounted /tmp with security options"
    fi
    
    # Remount /var/tmp with security options if it exists
    if mount | grep -q " /var/tmp "; then
        mount -o remount,noexec,nosuid,nodev /var/tmp 2>/dev/null || true
        log_security "INFO" "Remounted /var/tmp with security options"
    fi
    
    # Remount /dev/shm with security options
    if mount | grep -q " /dev/shm "; then
        mount -o remount,noexec,nosuid,nodev /dev/shm 2>/dev/null || true
        log_security "INFO" "Remounted /dev/shm with security options"
    fi
    
    # Set restrictive permissions on sensitive files
    log_security "INFO" "Setting restrictive file permissions"
    
    # Protect configuration files
    chmod 600 /etc/pppwn/config 2>/dev/null || true
    chmod 700 /etc/pppwn 2>/dev/null || true
    
    # Protect log files
    chmod 600 /var/log/* 2>/dev/null || true
    
    # Protect temporary directories
    chmod 1777 /tmp 2>/dev/null || true
    chmod 1777 /var/tmp 2>/dev/null || true
    
    # Remove world-readable permissions from home directories
    chmod 700 /root 2>/dev/null || true
    
    log_security "SUCCESS" "Filesystem security configuration completed"
}

# Function to implement read-only filesystem protections
implement_readonly_protections() {
    if [ "$READONLY_FILESYSTEM" != "true" ]; then
        log_security "INFO" "Read-only filesystem protection disabled by configuration"
        return 0
    fi
    
    log_security "INFO" "Implementing read-only filesystem protections..."
    
    # Create list of directories that need to remain writable
    local writable_dirs="
        /tmp
        /var/tmp
        /var/log
        /var/run
        /dev/shm
        /proc
        /sys
    "
    
    # Remount root filesystem as read-only (will be done during shutdown)
    log_security "INFO" "Preparing for read-only root filesystem"
    
    # Ensure critical writable directories exist and are properly mounted
    for dir in $writable_dirs; do
        if [ -d "$dir" ]; then
            # Check if it's already a tmpfs
            if ! mount | grep -q "$dir.*tmpfs"; then
                log_security "INFO" "Directory $dir will remain writable"
            fi
        fi
    done
    
    # Create a script to remount root as read-only during shutdown
    cat > /usr/bin/enable-readonly-root << 'EOF'
#!/bin/sh
# Enable read-only root filesystem
sync
mount -o remount,ro / 2>/dev/null || true
EOF
    chmod +x /usr/bin/enable-readonly-root
    
    log_security "SUCCESS" "Read-only filesystem protections prepared"
}

# Function to configure network security
configure_network_security() {
    log_security "INFO" "Configuring network security..."
    
    # Disable IP forwarding
    if [ -f "/proc/sys/net/ipv4/ip_forward" ]; then
        log_security "INFO" "Disabling IP forwarding"
        echo 0 > /proc/sys/net/ipv4/ip_forward 2>/dev/null || true
    fi
    
    # Disable IPv6 if not needed
    if [ -f "/proc/sys/net/ipv6/conf/all/disable_ipv6" ]; then
        log_security "INFO" "Disabling IPv6"
        echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6 2>/dev/null || true
    fi
    
    # Enable SYN flood protection
    if [ -f "/proc/sys/net/ipv4/tcp_syncookies" ]; then
        log_security "INFO" "Enabling SYN flood protection"
        echo 1 > /proc/sys/net/ipv4/tcp_syncookies 2>/dev/null || true
    fi
    
    # Disable ICMP redirects
    if [ -f "/proc/sys/net/ipv4/conf/all/accept_redirects" ]; then
        log_security "INFO" "Disabling ICMP redirects"
        echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects 2>/dev/null || true
    fi
    
    # Disable source routing
    if [ -f "/proc/sys/net/ipv4/conf/all/accept_source_route" ]; then
        log_security "INFO" "Disabling source routing"
        echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route 2>/dev/null || true
    fi
    
    log_security "SUCCESS" "Network security configuration completed"
}

# Function to create memory clearing routines
create_memory_clearing_routines() {
    log_security "INFO" "Creating memory clearing routines..."
    
    # Create a script for periodic memory clearing
    cat > /usr/bin/clear-sensitive-memory << 'EOF'
#!/bin/sh
# Clear sensitive data from memory periodically

# Clear shell history
history -c 2>/dev/null || true

# Clear temporary files with sensitive data
find /tmp -name "*pppwn*" -type f -exec shred -vfz -n 3 {} \; 2>/dev/null || true
find /tmp -name "*exploit*" -type f -exec shred -vfz -n 3 {} \; 2>/dev/null || true
find /tmp -name "*network*" -type f -exec shred -vfz -n 3 {} \; 2>/dev/null || true

# Clear system caches
sync
echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true

# Clear kernel ring buffer
dmesg -c > /dev/null 2>&1 || true

logger -t memory-clear "Sensitive memory clearing completed"
EOF
    chmod +x /usr/bin/clear-sensitive-memory
    
    # Create a more aggressive memory clearing script for shutdown
    cat > /usr/bin/clear-all-memory << 'EOF'
#!/bin/sh
# Aggressively clear all sensitive memory before shutdown

# Clear all shell histories
for hist in ~/.bash_history ~/.ash_history ~/.sh_history; do
    if [ -f "$hist" ]; then
        shred -vfz -n 3 "$hist" 2>/dev/null || rm -f "$hist"
    fi
done

# Clear all temporary files
find /tmp -type f -exec shred -vfz -n 3 {} \; 2>/dev/null || true
find /var/tmp -type f -exec shred -vfz -n 3 {} \; 2>/dev/null || true

# Clear log files that might contain sensitive data
for log in /var/log/messages /var/log/syslog /var/log/kern.log; do
    if [ -f "$log" ]; then
        shred -vfz -n 3 "$log" 2>/dev/null || rm -f "$log"
    fi
done

# Clear system caches multiple times
for i in 1 2 3; do
    sync
    echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true
    sleep 1
done

# Clear kernel ring buffer
dmesg -c > /dev/null 2>&1 || true

# Fill available memory with zeros (basic approach)
dd if=/dev/zero of=/tmp/memory_fill bs=1M count=50 2>/dev/null || true
rm -f /tmp/memory_fill 2>/dev/null || true

logger -t memory-clear "Aggressive memory clearing completed"
EOF
    chmod +x /usr/bin/clear-all-memory
    
    log_security "SUCCESS" "Memory clearing routines created"
}

# Function to apply all security hardening measures
apply_all_hardening() {
    log_security "INFO" "Starting comprehensive security hardening..."
    
    disable_unused_services
    configure_minimal_system
    implement_memory_protection
    configure_filesystem_security
    implement_readonly_protections
    configure_network_security
    create_memory_clearing_routines
    
    log_security "SUCCESS" "All security hardening measures applied successfully"
}

# Function to verify hardening status
verify_hardening() {
    log_security "INFO" "Verifying security hardening status..."
    
    local issues=0
    
    # Check if unnecessary services are disabled
    for service in telnetd ftpd httpd sshd; do
        if pgrep "$service" >/dev/null 2>&1; then
            log_security "WARNING" "Service $service is still running"
            issues=$((issues + 1))
        fi
    done
    
    # Check filesystem permissions
    if [ -r /etc/shadow ] && [ "$(stat -c %a /etc/shadow 2>/dev/null)" != "600" ]; then
        log_security "WARNING" "/etc/shadow has incorrect permissions"
        issues=$((issues + 1))
    fi
    
    # Check if swap is disabled
    if swapon -s | grep -q "/"; then
        log_security "WARNING" "Swap is still enabled"
        issues=$((issues + 1))
    fi
    
    if [ $issues -eq 0 ]; then
        log_security "SUCCESS" "Security hardening verification passed"
        return 0
    else
        log_security "WARNING" "Security hardening verification found $issues issues"
        return 1
    fi
}

# Main function
main() {
    local action="${1:-apply}"
    
    # Create log file
    touch "$HARDENING_LOG"
    
    log_security "INFO" "Security hardening script started"
    log_security "INFO" "Action: $action"
    
    case "$action" in
        "apply")
            apply_all_hardening
            ;;
        "verify")
            verify_hardening
            ;;
        "clear-memory")
            /usr/bin/clear-sensitive-memory
            ;;
        "clear-all-memory")
            /usr/bin/clear-all-memory
            ;;
        *)
            echo "Usage: $0 {apply|verify|clear-memory|clear-all-memory}"
            echo "  apply           - Apply all security hardening measures"
            echo "  verify          - Verify current hardening status"
            echo "  clear-memory    - Clear sensitive data from memory"
            echo "  clear-all-memory - Aggressively clear all memory"
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"