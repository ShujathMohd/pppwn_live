#!/bin/sh
#
# Emergency Shell Access for PPPwn Live System
# Provides emergency access when normal operation fails
# Integrates with the recovery system for comprehensive troubleshooting
#

# Function to show emergency menu
show_emergency_menu() {
    clear
    echo -e "\033[1;31m╔══════════════════════════════════════════════════════════════╗\033[0m"
    echo -e "\033[1;31m║                    EMERGENCY SHELL                          ║\033[0m"
    echo -e "\033[1;31m╠══════════════════════════════════════════════════════════════╣\033[0m"
    echo -e "\033[1;31m║\033[0m  This is an emergency shell for troubleshooting PPPwn      \033[1;31m║\033[0m"
    echo -e "\033[1;31m║\033[0m  Live System issues. Use with caution.                     \033[1;31m║\033[0m"
    echo -e "\033[1;31m╚══════════════════════════════════════════════════════════════╝\033[0m"
    echo
    
    echo -e "\033[1;33mAvailable Emergency Commands:\033[0m"
    echo "  1. recovery-system     - Launch full recovery system (recommended)"
    echo "  2. restart-network     - Restart network detection"
    echo "  3. restart-services    - Restart all PPPwn services"
    echo "  4. check-logs          - View system logs"
    echo "  5. manual-pppwn        - Run PPPwn with custom parameters"
    echo "  6. system-info         - Show detailed system information"
    echo "  7. clear-temp          - Clear temporary files and reset state"
    echo "  8. safe-shutdown       - Perform safe system shutdown"
    echo "  9. shell               - Access full shell (advanced users)"
    echo "  0. return              - Return to main menu"
    echo
}

# Function to restart network detection
restart_network() {
    echo "Restarting network detection..."
    
    # Stop network detection service
    /etc/init.d/S98network-detect stop
    
    # Clear network state
    rm -f /tmp/pppwn_interface /tmp/pppwn_ip /tmp/pppwn_config_method
    rm -f /tmp/pppwn_ps4_* /tmp/pppwn_error
    
    # Restart network detection
    /etc/init.d/S98network-detect start
    
    if [ $? -eq 0 ]; then
        echo "Network detection restarted successfully"
    else
        echo "Failed to restart network detection"
    fi
    
    echo "Press Enter to continue..."
    read
}

# Function to restart all services
restart_services() {
    echo "Restarting all PPPwn services..."
    
    local services="S95pppwn-setup S96service-monitor S98network-detect"
    
    # Stop services in reverse order
    for service in S98network-detect S96service-monitor S95pppwn-setup; do
        echo "Stopping $service..."
        /etc/init.d/$service stop
    done
    
    # Clear state
    rm -rf /tmp/pppwn-status /tmp/pppwn_* /tmp/shutdown-triggers
    
    # Start services in correct order
    for service in $services; do
        echo "Starting $service..."
        /etc/init.d/$service start
        sleep 2
    done
    
    echo "All services restarted"
    echo "Press Enter to continue..."
    read
}

# Function to check logs
check_logs() {
    echo "System Logs:"
    echo "============"
    
    # Show recent system messages
    if [ -f /var/log/messages ]; then
        echo "Recent system messages:"
        tail -20 /var/log/messages
    fi
    
    echo
    
    # Show PPPwn specific logs
    echo "PPPwn related logs:"
    dmesg | grep -i pppwn | tail -10
    
    echo
    echo "Press Enter to continue..."
    read
}

# Function to run manual PPPwn
manual_pppwn() {
    echo "Manual PPPwn Execution"
    echo "====================="
    
    # Check if PPPwn binary exists
    if [ ! -x /usr/bin/pppwn ]; then
        echo "ERROR: PPPwn binary not found at /usr/bin/pppwn"
        echo "Press Enter to continue..."
        read
        return
    fi
    
    # Get interface
    printf "Network interface [auto-detect]: "
    read interface
    
    if [ -z "$interface" ]; then
        if [ -f /tmp/pppwn_interface ]; then
            interface=$(cat /tmp/pppwn_interface)
            echo "Using detected interface: $interface"
        else
            echo "No interface specified and auto-detection failed"
            echo "Available interfaces:"
            ip link show | grep -E '^[0-9]+:' | cut -d: -f2 | tr -d ' '
            echo "Press Enter to continue..."
            read
            return
        fi
    fi
    
    # Get firmware version
    printf "Firmware version [1100]: "
    read fw_version
    [ -z "$fw_version" ] && fw_version="1100"
    
    # Get stage files
    printf "Stage1 file [auto]: "
    read stage1_file
    if [ -z "$stage1_file" ]; then
        stage1_file=$(find /usr/share/pppwn/stage1/ -name "*.bin" | head -1)
    fi
    
    printf "Stage2 file [auto]: "
    read stage2_file
    if [ -z "$stage2_file" ]; then
        stage2_file=$(find /usr/share/pppwn/stage2/ -name "*.bin" | head -1)
    fi
    
    # Build command
    local cmd="/usr/bin/pppwn -i $interface --fw $fw_version"
    
    if [ -n "$stage1_file" ] && [ -f "$stage1_file" ]; then
        cmd="$cmd --stage1 $stage1_file"
    fi
    
    if [ -n "$stage2_file" ] && [ -f "$stage2_file" ]; then
        cmd="$cmd --stage2 $stage2_file"
    fi
    
    echo
    echo "Command to execute: $cmd"
    printf "Continue? (y/N): "
    read confirm
    
    case "$confirm" in
        [Yy]|[Yy][Ee][Ss])
            echo "Executing PPPwn..."
            echo "Press Ctrl+C to interrupt"
            echo
            eval "$cmd"
            ;;
        *)
            echo "Cancelled"
            ;;
    esac
    
    echo
    echo "Press Enter to continue..."
    read
}

# Function to show detailed system info
show_system_info() {
    echo "Detailed System Information"
    echo "=========================="
    
    echo "Kernel: $(uname -a)"
    echo "Uptime: $(uptime)"
    echo "Memory: $(free -h | grep Mem)"
    echo "Disk: $(df -h / | tail -1)"
    echo
    
    echo "Network Interfaces:"
    ip addr show
    echo
    
    echo "Running Processes:"
    ps aux | head -20
    echo
    
    echo "PPPwn Files:"
    echo "Stage1 files:"
    ls -la /usr/share/pppwn/stage1/ 2>/dev/null || echo "  (not found)"
    echo "Stage2 files:"
    ls -la /usr/share/pppwn/stage2/ 2>/dev/null || echo "  (not found)"
    echo "PPPwn binary:"
    ls -la /usr/bin/pppwn 2>/dev/null || echo "  (not found)"
    
    echo
    echo "Press Enter to continue..."
    read
}

# Function to clear temporary files
clear_temp() {
    echo "Clearing temporary files and resetting state..."
    
    printf "This will clear all PPPwn state. Continue? (y/N): "
    read confirm
    
    case "$confirm" in
        [Yy]|[Yy][Ee][Ss])
            # Clear PPPwn state files
            rm -f /tmp/pppwn_*
            rm -rf /tmp/pppwn-status
            rm -rf /tmp/shutdown-triggers
            rm -f /tmp/motd_shown_*
            rm -f /tmp/service-monitor-*
            
            # Clear network state
            rm -f /tmp/dhcp_status /tmp/udhcpc_script
            
            echo "Temporary files cleared"
            echo "You may need to restart services for changes to take effect"
            ;;
        *)
            echo "Cancelled"
            ;;
    esac
    
    echo "Press Enter to continue..."
    read
}

# Function to perform safe shutdown
safe_shutdown() {
    echo "Safe System Shutdown"
    echo "==================="
    
    printf "Are you sure you want to shutdown the system? (y/N): "
    read confirm
    
    case "$confirm" in
        [Yy]|[Yy][Ee][Ss])
            echo "Initiating safe shutdown..."
            if [ -x /usr/bin/secure-shutdown ]; then
                /usr/bin/secure-shutdown manual "Emergency shell shutdown"
            else
                sync
                /sbin/shutdown -h now
            fi
            ;;
        *)
            echo "Shutdown cancelled"
            echo "Press Enter to continue..."
            read
            ;;
    esac
}

# Launch recovery system
launch_recovery_system() {
    echo "Launching comprehensive recovery system..."
    echo "This provides advanced recovery options and fallback configurations."
    echo
    
    if [ -x /usr/bin/recovery-system ]; then
        /usr/bin/recovery-system
    else
        echo "ERROR: Recovery system not found at /usr/bin/recovery-system"
        echo "Falling back to basic emergency shell functions"
        echo "Press Enter to continue..."
        read
    fi
}

# Main emergency shell loop
main_emergency_loop() {
    while true; do
        show_emergency_menu
        printf "Enter your choice (0-9): "
        read choice
        
        case "$choice" in
            1) launch_recovery_system ;;
            2) restart_network ;;
            3) restart_services ;;
            4) check_logs ;;
            5) manual_pppwn ;;
            6) show_system_info ;;
            7) clear_temp ;;
            8) safe_shutdown ;;
            9) 
                echo "Entering full shell mode..."
                echo "Type 'exit' to return to emergency menu"
                /bin/sh
                ;;
            0) 
                echo "Returning to main menu..."
                return 0
                ;;
            *)
                echo "Invalid choice: $choice"
                echo "Press Enter to try again..."
                read
                ;;
        esac
    done
}

# Execute main loop
main_emergency_loop