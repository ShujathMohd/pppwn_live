#!/bin/sh
#
# PPPwn Setup Service Init Script
# Orchestrates PPPwn system initialization and preparation
#

DAEMON="pppwn-setup"
PIDFILE="/var/run/$DAEMON.pid"
LOCKFILE="/var/lock/$DAEMON"

# Source function library
. /etc/init.d/functions

# Source configuration
[ -f /etc/pppwn/config ] && . /etc/pppwn/config

start() {
    printf "Starting $DAEMON: "
    
    # Check if already running
    if [ -f "$PIDFILE" ] && kill -0 $(cat "$PIDFILE") 2>/dev/null; then
        echo "ALREADY RUNNING"
        return 0
    fi
    
    # Create lock file to prevent multiple instances
    if ! mkdir "$LOCKFILE" 2>/dev/null; then
        echo "FAILED - another instance is starting"
        return 1
    fi
    
    # Ensure required directories exist
    mkdir -p /tmp/pppwn-status
    mkdir -p /var/log/pppwn
    
    # Clear any previous status files
    rm -f /tmp/pppwn_*
    rm -f /tmp/shutdown-triggers/*
    
    # Initialize system status
    echo "INITIALIZING" > /tmp/pppwn-status/system
    echo "WAITING" > /tmp/pppwn-status/network
    echo "WAITING" > /tmp/pppwn-status/exploit
    
    # Start PPPwn setup process in background
    (
        # Log startup
        logger -t pppwn-setup "PPPwn Live System initialization started"
        
        # Wait for network detection to complete
        local network_timeout=60
        local elapsed=0
        
        while [ $elapsed -lt $network_timeout ]; do
            if [ -f /tmp/pppwn_interface ]; then
                echo "READY" > /tmp/pppwn-status/network
                logger -t pppwn-setup "Network detection completed successfully"
                break
            elif [ -f /tmp/pppwn_error ]; then
                echo "FAILED" > /tmp/pppwn-status/network
                logger -t pppwn-setup "Network detection failed"
                break
            fi
            
            sleep 2
            elapsed=$((elapsed + 2))
        done
        
        if [ $elapsed -ge $network_timeout ]; then
            echo "TIMEOUT" > /tmp/pppwn-status/network
            logger -t pppwn-setup "Network detection timed out"
        fi
        
        # Update system status
        if [ "$(cat /tmp/pppwn-status/network)" = "READY" ]; then
            echo "READY" > /tmp/pppwn-status/system
            logger -t pppwn-setup "PPPwn system ready for execution"
        else
            echo "ERROR" > /tmp/pppwn-status/system
            logger -t pppwn-setup "PPPwn system initialization failed"
        fi
        
        # Clean up lock
        rmdir "$LOCKFILE" 2>/dev/null
        
    ) &
    
    local setup_pid=$!
    echo $setup_pid > "$PIDFILE"
    
    echo "OK"
    return 0
}

stop() {
    printf "Stopping $DAEMON: "
    
    if [ -f "$PIDFILE" ]; then
        local pid=$(cat "$PIDFILE")
        if kill -0 "$pid" 2>/dev/null; then
            kill -TERM "$pid" 2>/dev/null
            
            # Wait for graceful shutdown
            local timeout=10
            while [ $timeout -gt 0 ] && kill -0 "$pid" 2>/dev/null; do
                sleep 1
                timeout=$((timeout - 1))
            done
            
            # Force kill if still running
            if kill -0 "$pid" 2>/dev/null; then
                kill -KILL "$pid" 2>/dev/null
            fi
        fi
        rm -f "$PIDFILE"
    fi
    
    # Clean up status files and locks
    rm -rf /tmp/pppwn-status
    rmdir "$LOCKFILE" 2>/dev/null
    
    echo "OK"
    return 0
}

restart() {
    stop
    sleep 2
    start
}

status() {
    if [ -f "$PIDFILE" ] && kill -0 $(cat "$PIDFILE") 2>/dev/null; then
        echo "$DAEMON is running (PID: $(cat "$PIDFILE"))"
        
        # Show detailed status if available
        if [ -d /tmp/pppwn-status ]; then
            echo "System Status:"
            echo "  Overall: $(cat /tmp/pppwn-status/system 2>/dev/null || echo 'UNKNOWN')"
            echo "  Network: $(cat /tmp/pppwn-status/network 2>/dev/null || echo 'UNKNOWN')"
            echo "  Exploit: $(cat /tmp/pppwn-status/exploit 2>/dev/null || echo 'UNKNOWN')"
        fi
        
        return 0
    else
        echo "$DAEMON is not running"
        return 1
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart|reload)
        restart
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
esac

exit $?