#!/bin/sh
#
# Secure Shutdown Service for PPPwn Live System
# Provides emergency shutdown capabilities and monitors system health
#

DAEMON="secure-shutdown"
PIDFILE="/var/run/$DAEMON.pid"
DAEMON_ARGS=""

# Source function library
. /etc/init.d/functions

start() {
    printf "Starting $DAEMON: "
    
    # Create emergency shutdown trigger
    mkdir -p /tmp/shutdown-triggers
    
    # Set up emergency shutdown monitoring in background
    (
        # Monitor for emergency shutdown triggers
        while true; do
            # Check for emergency shutdown file
            if [ -f /tmp/shutdown-triggers/emergency ]; then
                /usr/bin/secure-shutdown emergency "Emergency shutdown triggered"
                break
            fi
            
            # Check for critical system errors
            if [ -f /tmp/shutdown-triggers/critical-error ]; then
                local error_msg=$(cat /tmp/shutdown-triggers/critical-error 2>/dev/null || echo "Unknown critical error")
                /usr/bin/secure-shutdown error "$error_msg"
                break
            fi
            
            # Check for system timeout
            if [ -f /tmp/shutdown-triggers/system-timeout ]; then
                local timeout_msg=$(cat /tmp/shutdown-triggers/system-timeout 2>/dev/null || echo "System timeout")
                /usr/bin/secure-shutdown timeout "$timeout_msg"
                break
            fi
            
            sleep 5
        done
    ) &
    
    echo $! > "$PIDFILE"
    echo "OK"
}

stop() {
    printf "Stopping $DAEMON: "
    if [ -f "$PIDFILE" ]; then
        kill $(cat "$PIDFILE") 2>/dev/null
        rm -f "$PIDFILE"
    fi
    rm -rf /tmp/shutdown-triggers
    echo "OK"
}

restart() {
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart|reload)
        restart
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

exit $?